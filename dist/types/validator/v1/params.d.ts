import * as _m0 from "protobufjs/minimal";
import { Duration } from "../../google/protobuf/duration";
export declare const protobufPackage = "decimal.validator.v1";
/** Params defines the parameters for the module. */
export interface Params {
    /** max_validators defines the maximum number of validators can be bounded at the same time. */
    maxValidators: number;
    /** max_delegations defines the maximum number of delegations per validator at be bounded at the same time. */
    maxDelegations: number;
    /** max_entries defines the max entries for single undelegation/redelegation (per pair/trio). */
    maxEntries: number;
    /** historical_entries defines the number of historical entries to persist. */
    historicalEntries: number;
    /** redelegation_time defines the time duration of redelegation a stake (moving to the other validator). */
    redelegationTime: Duration | undefined;
    /** undelegation_time defines the time duration of undelegation a stake (unbonding from the validator). */
    undelegationTime: Duration | undefined;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial<I extends {
        maxValidators?: number | undefined;
        maxDelegations?: number | undefined;
        maxEntries?: number | undefined;
        historicalEntries?: number | undefined;
        redelegationTime?: {
            seconds?: {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } | undefined;
            nanos?: number | undefined;
        } | undefined;
        undelegationTime?: {
            seconds?: {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } | undefined;
            nanos?: number | undefined;
        } | undefined;
    } & {
        maxValidators?: number | undefined;
        maxDelegations?: number | undefined;
        maxEntries?: number | undefined;
        historicalEntries?: number | undefined;
        redelegationTime?: ({
            seconds?: {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: ({
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } & {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } & { [K in Exclude<keyof I["redelegationTime"]["seconds"], keyof import("long").default>]: never; }) | undefined;
            nanos?: number | undefined;
        } & { [K_1 in Exclude<keyof I["redelegationTime"], keyof Duration>]: never; }) | undefined;
        undelegationTime?: ({
            seconds?: {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } | undefined;
            nanos?: number | undefined;
        } & {
            seconds?: ({
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } & {
                high?: number | undefined;
                low?: number | undefined;
                unsigned?: boolean | undefined;
                add?: ((addend: string | number | import("long").default) => import("long").default) | undefined;
                and?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                compare?: ((other: string | number | import("long").default) => number) | undefined;
                comp?: ((other: string | number | import("long").default) => number) | undefined;
                divide?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                div?: ((divisor: string | number | import("long").default) => import("long").default) | undefined;
                equals?: ((other: string | number | import("long").default) => boolean) | undefined;
                eq?: ((other: string | number | import("long").default) => boolean) | undefined;
                getHighBits?: (() => number) | undefined;
                getHighBitsUnsigned?: (() => number) | undefined;
                getLowBits?: (() => number) | undefined;
                getLowBitsUnsigned?: (() => number) | undefined;
                getNumBitsAbs?: (() => number) | undefined;
                greaterThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                gt?: ((other: string | number | import("long").default) => boolean) | undefined;
                greaterThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                gte?: ((other: string | number | import("long").default) => boolean) | undefined;
                ge?: ((other: string | number | import("long").default) => boolean) | undefined;
                isEven?: (() => boolean) | undefined;
                isNegative?: (() => boolean) | undefined;
                isOdd?: (() => boolean) | undefined;
                isPositive?: (() => boolean) | undefined;
                isZero?: (() => boolean) | undefined;
                eqz?: (() => boolean) | undefined;
                lessThan?: ((other: string | number | import("long").default) => boolean) | undefined;
                lt?: ((other: string | number | import("long").default) => boolean) | undefined;
                lessThanOrEqual?: ((other: string | number | import("long").default) => boolean) | undefined;
                lte?: ((other: string | number | import("long").default) => boolean) | undefined;
                le?: ((other: string | number | import("long").default) => boolean) | undefined;
                modulo?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                mod?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                rem?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                multiply?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                mul?: ((multiplier: string | number | import("long").default) => import("long").default) | undefined;
                negate?: (() => import("long").default) | undefined;
                neg?: (() => import("long").default) | undefined;
                not?: (() => import("long").default) | undefined;
                countLeadingZeros?: (() => number) | undefined;
                clz?: (() => number) | undefined;
                countTrailingZeros?: (() => number) | undefined;
                ctz?: (() => number) | undefined;
                notEquals?: ((other: string | number | import("long").default) => boolean) | undefined;
                neq?: ((other: string | number | import("long").default) => boolean) | undefined;
                ne?: ((other: string | number | import("long").default) => boolean) | undefined;
                or?: ((other: string | number | import("long").default) => import("long").default) | undefined;
                shiftLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shiftRightUnsigned?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shru?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                shr_u?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateLeft?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotl?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotateRight?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                rotr?: ((numBits: number | import("long").default) => import("long").default) | undefined;
                subtract?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                sub?: ((subtrahend: string | number | import("long").default) => import("long").default) | undefined;
                toInt?: (() => number) | undefined;
                toNumber?: (() => number) | undefined;
                toBytes?: ((le?: boolean | undefined) => number[]) | undefined;
                toBytesLE?: (() => number[]) | undefined;
                toBytesBE?: (() => number[]) | undefined;
                toSigned?: (() => import("long").default) | undefined;
                toString?: ((radix?: number | undefined) => string) | undefined;
                toUnsigned?: (() => import("long").default) | undefined;
                xor?: ((other: string | number | import("long").default) => import("long").default) | undefined;
            } & { [K_2 in Exclude<keyof I["undelegationTime"]["seconds"], keyof import("long").default>]: never; }) | undefined;
            nanos?: number | undefined;
        } & { [K_3 in Exclude<keyof I["undelegationTime"], keyof Duration>]: never; }) | undefined;
    } & { [K_4 in Exclude<keyof I, keyof Params>]: never; }>(object: I): Params;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
