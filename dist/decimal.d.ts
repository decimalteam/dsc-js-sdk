import { DelegationStatus } from "./api/getNftStakes";
import DecimalApi from "./api/index";
import Client from "./client";
import { Transaction } from "./transaction";
import Wallet from "./wallet";
import { AddressBalance } from "./interfaces/addressBalance";
import { AddressTransaction } from "./interfaces/addressTransaction";
import { AddressNftBalance } from "./interfaces/addressNftBalance";
import { AddressBookItem } from "./api/createAddressbookItem";
import { NETWORKS } from "./endpoints";
import DecimalContract from "./contract";
export interface CustomNodeEndpoints {
    rpc: string;
    rest: string;
}
export default class Decimal {
    private readonly rpcInstance;
    private readonly apiInstance;
    private readonly contractInstance;
    private readonly gateUrl;
    private readonly isNodeDirectMode;
    private readonly nodeRestUrl;
    private readonly network;
    private wallet;
    static connect(network: NETWORKS, isNodeDirectMode?: boolean, customNodeEndpoint?: CustomNodeEndpoints): Promise<Decimal>;
    private constructor();
    getRpcInstance(): Client | undefined;
    getApiInstance(): DecimalApi;
    getEvmInstance(): DecimalContract;
    getTxTypes(): {
        COIN_BUY: string;
        COIN_CREATE: string;
        COIN_UPDATE: string;
        COIN_SELL: string;
        COIN_SEND: string;
        COIN_BURN: string;
        COIN_MULTISEND: string;
        COIN_SELL_ALL: string;
        COIN_REDEEM_CHECK: string;
        COIN_ISSUE_CHECK: string;
        VALIDATOR_CANDIDATE: string;
        VALIDATOR_DELEGATE: string;
        VALIDATOR_DELEGATE_COSMOS: string;
        VALIDATOR_REDELEGATE: string;
        VALIDATOR_CANCEL_REDELEGATE: string;
        VALIDATOR_CANCEL_UNDELEGATE: string;
        VALIDATOR_SET_ONLINE: string;
        VALIDATOR_SET_OFFLINE: string;
        VALIDATOR_UNBOND: string;
        VALIDATOR_CANDIDATE_EDIT: string;
        MULTISIG_CREATE_WALLET: string;
        MULTISIG_CREATE_TX: string;
        MULTISIG_SIGN_TX: string;
        SWAP_INIT: string;
        SWAP_REDEEM: string;
        NFT_MINT: string;
        NFT_BURN: string;
        NFT_EDIT_METADATA: string;
        NFT_TRANSFER: string;
        NFT_DELEGATE: string;
        NFT_UNBOND: string;
        NFT_REDELEGATE: string;
        NFT_CANCEL_REDELEGATE: string;
        NFT_CANCEL_UNDELEGATE: string;
        NFT_UPDATE_RESERVE: string;
        CHAIN_ACTIVATE: string;
        CHAIN_DEACTIVATE: string;
        SOFTWARE_UPGRADE: string;
        SOFTWARE_CANCEL_UPGRADE: string;
        ETHEREUM_TX: string;
        UPDATE_COIN_PRICES: string;
        REOWN_LEGACY: string;
    };
    getNetworkBaseCoin(): string;
    setWallet(wallet: Wallet): void;
    transactionSender(baseCoin?: string): Promise<Transaction>;
    verifyAddress(address: string, prefix?: string): boolean;
    getEvmAccountBalance(address: string): Promise<any>;
    rpcApi(): Client;
    getAddressbook(): Promise<any>;
    createAddressbookItem(payload: AddressBookItem): Promise<any>;
    updateAddressbookItem(itemId: number, payload: AddressBookItem): Promise<any>;
    deleteAddressbookItem(itemId: number): Promise<any>;
    requestLegacy(): Promise<any>;
    getMultisigsByAddress(address: string): Promise<any>;
    getMultisig(address: string): Promise<any>;
    getMultisigTxs(address: string, limit?: number, offset?: number): Promise<any>;
    getStakesByAddress(address: string, status: string): Promise<any>;
    getValidator(address: string): Promise<any>;
    getNft(id: number): Promise<any> | null;
    getNftStakesByAddress(address: string, status: DelegationStatus): Promise<any>;
    getNfts(address: string, limit?: number, offset?: number, query?: any): Promise<any> | null;
    getNftTxes(id: number, limit?: number, offset?: number, order?: string): Promise<any> | null;
    getNftsTxes(address: string, limit?: number, offset?: number, order?: string): Promise<any> | null;
    getCoin(symbol: any): Promise<any>;
    checkCoinExists(symbol: any): Promise<boolean>;
    getMyCoins(limit: number, offset: number): Promise<any>;
    getMyTransactions(limit: number | undefined, offset: number | undefined, types: any, coins: any): Promise<any>;
    getCoinsList(limit: number | undefined, offset: number | undefined, query: any): Promise<any>;
    getAddress(address: string, txLimit?: number): Promise<any>;
    getBlockedAddresses(limit?: number, offset?: number, type?: object, q?: object): Promise<any> | null;
    updateAddressBlockingData(address: string, isBlocked: boolean, type: string, reason?: string): Promise<any> | null;
    getAddressBalances(address: string): Promise<AddressBalance | undefined>;
    getAddressTransactions(address: string, options?: {
        limit?: number;
        offset?: number;
    }): Promise<{
        count: number;
        items: AddressTransaction[];
    } | undefined>;
    getAddressNftsBalances(address: string): Promise<AddressNftBalance[] | undefined>;
    getContract(address: string): Promise<DecimalContract>;
}
